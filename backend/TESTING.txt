================================================================================
BACKEND TESTING GUIDE - Economic Dashboard
================================================================================

This guide explains how to run the comprehensive test suite for the backend API.

================================================================================
QUICK START
================================================================================

1. Install test dependencies:
   pip install -r requirements-dev.txt

2. Make sure the API is running:
   python -m uvicorn app.main:app --reload

3. Run the test suite:
   ./test_local.sh

================================================================================
WHAT GETS TESTED
================================================================================

The test suite includes 26 comprehensive integration tests across 5 categories:

1. HEALTH CHECKS (5 tests)
   - Root endpoint
   - Comprehensive health check
   - Liveness probe
   - Readiness probe
   - Ping endpoint

2. AUTHENTICATION (11 tests)
   - User registration (success, duplicate email, weak password)
   - User login (success, invalid credentials, nonexistent user)
   - Get current user (with/without token, invalid token)
   - Token refresh
   - Logout

3. DATA ENDPOINTS (6 tests)
   - Get current economic data
   - Get historical data (general, with date range, invalid series)
   - Manual data refresh (with/without auth)

4. CACHING (2 tests)
   - Redis caching behavior
   - Cache invalidation

5. INTEGRATION (2 tests)
   - Full user workflow (register -> login -> access data)
   - Database persistence

================================================================================
RUNNING TESTS
================================================================================

# Run all tests with the convenient script:
./test_local.sh

# Run tests directly with pytest:
pytest test_api.py -v

# Run specific test categories:
pytest test_api.py -m health          # Health checks only
pytest test_api.py -m auth            # Authentication only
pytest test_api.py -m data            # Data endpoints only
pytest test_api.py -m cache           # Caching only
pytest test_api.py -m integration     # Integration only

# Run with coverage report:
pytest test_api.py --cov=app --cov-report=html

# Test against Railway deployment:
API_BASE_URL=https://your-app.railway.app ./test_local.sh

================================================================================
UNDERSTANDING TEST OUTPUT
================================================================================

The test_local.sh script provides a color-coded summary:

✅ GREEN checkmark = Test passed
❌ RED cross mark = Test failed
⚠️  YELLOW warning = Warning/issue
ℹ️  BLUE info = Information

Example output:

=========================================
Test Summary
=========================================
✅ Health checks passed (5/5)
✅ Authentication tests passed (11/11)
✅ Data endpoint tests passed (6/6)
✅ Caching tests passed (2/2)
✅ Integration tests passed (2/2)

Overall Result:
✅ 26 passed in 8.5s

ℹ️  Component Health Status:
✅ PostgreSQL connected
✅ Redis connected
✅ FRED API configured

================================================================================
TROUBLESHOOTING
================================================================================

If tests fail, check:

1. API is running:
   curl http://localhost:8000/health/ping

2. Environment variables are set (.env file):
   - DATABASE_URL
   - REDIS_URL
   - FRED_API_KEY
   - SECRET_KEY

3. Database and Redis are accessible:
   Check health endpoint: curl http://localhost:8000/health

4. Dependencies are installed:
   pip install -r requirements.txt
   pip install -r requirements-dev.txt

5. Ports are not blocked:
   Default API port: 8000
   PostgreSQL port: 5432
   Redis port: 6379

================================================================================
FILES CREATED
================================================================================

1. test_api.py
   - Main test file with 26 integration tests
   - Uses pytest and httpx for async testing
   - Organized into test classes by category

2. test_local.sh
   - Convenient test runner script
   - Checks API availability
   - Provides formatted output and summary
   - Supports custom API URLs

3. pytest.ini
   - Pytest configuration
   - Defines test markers
   - Sets default options

4. requirements-dev.txt
   - Development dependencies
   - Testing tools (pytest, httpx, coverage)
   - Code quality tools (black, flake8, mypy)

================================================================================
CONTINUOUS INTEGRATION
================================================================================

These tests are designed to work in CI/CD pipelines:

# Example GitHub Actions usage:
- name: Run tests
  env:
    API_BASE_URL: ${{ secrets.API_URL }}
  run: |
    pip install -r requirements-dev.txt
    pytest test_api.py -v --tb=short

# Example with coverage:
- name: Run tests with coverage
  run: |
    pytest test_api.py --cov=app --cov-report=xml

================================================================================
NEXT STEPS
================================================================================

After running tests successfully:

1. Review the coverage report to identify untested code
2. Add more specific tests for edge cases
3. Set up automated testing in CI/CD
4. Configure pre-commit hooks to run tests before commits
5. Monitor test performance over time

For questions or issues, refer to the test code comments or documentation.

================================================================================
